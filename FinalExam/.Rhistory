)
# Basic piechart
ggplot(rangeWeightData, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
})
#Compare Criteria Page
output$tableCompare <- DT::renderDataTable(DT::datatable({
nationalitySummary
}))
output$plotCompareCriteria =renderPlot({
if(input$criteria == "Medal"){
v$criteria = criteriaMedal
}
if(input$criteria == "Male"){
v$criteria = criteriaMale
}
if(input$criteria == "Female"){
v$criteria = criteriaFemale
}
barplot(height=v$criteria, names=c("China","United States","France","Canada"),
col=rgb(0.8,0.1,0.1,0.6),
xlab="Nationality",
ylab="Ratio",
main="THE GRAPH COMPARE THREE COUNTRY",
ylim=c(0,100)
)
})
#Compare Age Page
output$tableCompareAge <- DT::renderDataTable(DT::datatable({
compareAge = data.frame(Nationality = nationalityAge,
Quantity = v$age)
setDT(compareAge)
compareAge
}))
output$plotCompareAgeBar = renderPlot({
nationalityAgeCount = 1
for (nationalityAgeChild in nationalityAge) {
v$age[nationalityAgeCount] = length(unique(data$Name[which(data$Age > input$rangeAge[1] & data$Age < input$rangeAge[2] & data$Nationality == nationalityAgeChild)]))
nationalityAgeCount = nationalityAgeCount + 1
}
barplot(height=v$age, names=nationalityAge,
col=rgb(0.8,0.1,0.1,0.6),
xlab="Nationality",
ylab="Ratio",
main="THE GRAPH COMPARE AGE SOME COUNTRY",
ylim=c(0,10000)
)
})
#Compare Medal Host Country Page
output$tableCompareMedalHost <- DT::renderDataTable(DT::datatable({
compareMedalHost = data.frame(Host_Country = nationalityHost,
Quantity = v$year)
setDT(compareMedalHost)
compareMedalHost
}))
output$plotCompareMedalHostBar = renderPlot({
nationalityHostCount = 1
for (nationalityHostChild in nationalityHost) {
v$year[nationalityHostCount] = length(data$Name[which(data$Year > input$rangeMedalHost[1] & data$Year < input$rangeMedalHost[2] & data$Host_country == nationalityHostChild)])
nationalityHostCount = nationalityHostCount + 1
}
barplot(height=v$year, names=nationalityHost,
col=rgb(0.8,0.1,0.1,0.6),
xlab="Host Country",
ylab="Ratio",
main="THE GRAPH COMPARE MEDAL SOME HOST COUNTRY",
ylim=c(0,25000)
)
})
#Statistic Event Page
output$tableEvent <- DT::renderDataTable(DT::datatable({
atheleteCount = 1
for (nationalitySub in unique(data$Nationality)) {
v$quantityAthlete[atheleteCount] = length(unique(data$Name[which(data$Event == input$event & data$Nationality == nationalitySub)]))
v$quantityMedal[atheleteCount] = length(data$Name[which(data$Event == input$event & data$Nationality == nationalitySub)])
atheleteCount = atheleteCount + 1
}
event = data.frame(Nationality = unique(data$Nationality),
Quantity_Athelete = v$quantityAthlete,
Quantity_Medal = v$quantityMedal)
setDT(event)
event
}))
output$plotStatisticEvent = renderPlot({
totalPercent = length(unique(data$Name[which(data$Event != input$event)]))
percent = (sum(v$quantityAthlete)/totalPercent)*100
totalPercent = 100 - percent
percentData = data.frame(group = c(paste(input$event,paste0(round(percent),"%"),sep = " "),"Total"),
value = c(percent,totalPercent))
ggplot(percentData, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
})
#Top Reward Page
output$tableAtheleteMedal = DT::renderDataTable(DT::datatable({v$nationalityList}))
output$tableNationalityMedal = DT::renderDataTable(DT::datatable({v$atheleteList}))
}
shinyApp(ui = ui, server = server)
relationshipModel
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(dplyr)
library("shiny")
library("stringr")
library(magrittr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
require(data.table)
library(forcats)
library(RColorBrewer)
library(shinydashboard)
library("shinycssloaders")
library("plotly")
library(caTools)
library(ROCR)
relationshipModel
#UI shiny
ui <- dashboardPage(
dashboardHeader(title = "Final Exam"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("tachometer-alt")),
menuItem("Dataset", tabName = "dataset", icon = icon("table")),
menuItem("Model", tabName = "model", icon = icon("coins")),
menuItem("Statistic Athlete Body", tabName = "athleteBody", icon = icon("weight")),
menuItem("Compare Criteria", tabName = "compare_criteria", icon = icon("compress-arrows-alt")),
menuItem("Compare Age", tabName = "compare_age", icon = icon("compress-arrows-alt")),
menuItem("Compare Medal Host Country", tabName = "compare_medal_host", icon = icon("compress-arrows-alt")),
menuItem("Statistic Event", tabName = "statistic_event", icon = icon("chart-bar")),
menuItem("Top Reward", tabName = "top_reward", icon = icon("th"))
)
),
dashboardBody(
tags$head(
tags$style(HTML('.content-wrapper {background-color:white;}'))
),
tabItems(
# First tab content
tabItem(tabName = "dashboard",
titlePanel("Analysis Dataset Olympic Games Year By Year"),
fluidRow(
# A static valueBox
valueBox(nrow(data), "Value Dataset", icon = icon("list")),
valueBox(ncol(data), "Variable Dataset", icon = icon("columns"),color = "purple"),
valueBox(nrow(sports), "Sport", icon = icon("running"),color = "yellow")
),
fluidRow(plotOutput("plotSport")),
fluidRow(
column(4,
box(title = "Quantity athelete paticipation", status = "primary", solidHeader = TRUE,width = 12,
tableOutput("tableSport")
)
),
column(8,
fluidRow(
box(
width = 6,title = "Compare athelete paticipation", solidHeader = TRUE,background = "maroon",
plotOutput("plotCompareCountry")
),
box(
title = "Ratio age paticipation", width = 6, solidHeader = TRUE,status = "warning",
plotOutput("plotRatioAge")
)
),
fluidRow(
plotOutput("plotRatioSex")
)
),
)
),
# Second tab content
tabItem(tabName = "dataset",
titlePanel("Dataset Overview"),
fluidRow(
column(4,
selectInput("medal",
"Medal:",
c("All",
unique(as.character(data$Medal))))
),
column(4,
selectInput("season",
"Season:",
c("All",
unique(as.character(data$Season))))
),
column(4,
selectInput("sex",
"Sex:",
c("All",
unique(as.character(data$Sex))))
)
),
fluidRow(
column(12,
DT::dataTableOutput("tableDataset")
)
),
),
tabItem(tabName = "model",
titlePanel("Model"),
fluidRow(
# A static valueBox
valueBox(round(exacModel*100,2), "Model Accuracy", icon = icon("list")),
valueBox(round(exacModelFound*100,2), "Base Model Accuracy", icon = icon("columns"),color = "purple"),
valueBox(round(S*100,2), "AUC", icon = icon("running"),color = "yellow")
),
fluidRow(
tabsetPanel(
id = 'dataset',
tabPanel("Dataset Model", DT::dataTableOutput("datasetModel")),
tabPanel("Plot Logistic", plotOutput("plotModel")),
tabPanel("Relationship Model", textOutput("relationshipModel"))
)
),
),
tabItem(tabName = "athleteBody",
titlePanel("Statistic Athelete Base On Height & Weight"),
fluidRow(
column(6,
sliderInput("rangeHeight", "Range Height:",
min = 100, max = 200,
value = c(100,200))
),
column(6,
sliderInput("rangeWeight", "Range Weight:",
min = 35.0, max = 180.0,
value = c(35.0,180.0))
),
),
fluidRow(
column(6,
plotOutput("plotHeight")
),
column(6,
plotOutput("plotWeight")
),
),
fluidRow(
DT::dataTableOutput("tableAthleteBody")
),
),
tabItem(tabName = "compare_criteria",
titlePanel("Compare Criteria"),
fluidRow(
column(6,
fluidRow(plotOutput("plotCompareCriteria")),
fluidRow(selectInput("criteria",
"Criteria:",
c("Medal", "Male","Female"))
)
),
column(6, DT::dataTableOutput("tableCompare"))
),
),
tabItem(tabName = "compare_age",
titlePanel("Compare Age"),
fluidRow(
column(4,
DT::dataTableOutput("tableCompareAge")
),
column(8,
sliderInput("rangeAge", "Range Age:",
min = 1, max = 80,
value = c(1,80)),
plotOutput("plotCompareAgeBar")
),
),
),
tabItem(tabName = "compare_medal_host",
titlePanel("Compare Medal Host Country"),
fluidRow(
column(4,
DT::dataTableOutput("tableCompareMedalHost")
),
column(8,
sliderInput("rangeMedalHost", "Range Year:",
min = 1890, max = 2018,
value = c(1890,2018)),
plotOutput("plotCompareMedalHostBar")
),
),
),
tabItem(tabName = "statistic_event",
titlePanel("Statistic Event"),
fluidRow(
column(4,
selectInput(inputId = "event",
label = "Choose a event:",
choices = unique(data$Event)),
plotOutput("plotStatisticEvent")
),
column(8,
DT::dataTableOutput("tableEvent")
),
),
),
# Third tab content
tabItem(tabName = "top_reward",
titlePanel("Top Reward"),
fluidRow(
column(8,
box(
title = "Top Medal Reward's Athelete", solidHeader = TRUE, status = "warning",width = 12,
DT::dataTableOutput("tableAtheleteMedal")
)
),
column(4,
box(
title = "Top Medal Reward's Nationality",solidHeader = TRUE, status = "warning",width = 12,
DT::dataTableOutput("tableNationalityMedal")
)
)
)
)
)
)
)
#Server shiny
server <- function(input, output, session) {
#Reactive values
v <- reactiveValues(nationalityList = nationalityList,
atheleteList = atheleteList,dataset = data,
criteria=criteriaMedal, age = rangeAge1, year = rangeYear,
quantityAthlete = c(), quantityMedal = c())
#Dashboard
output$txtOutput = renderText({
paste0(input$ageRange)
})
output$plotSport = renderPlot({
par(mar=c(11,4,4,4))
barplot(height=sports$Quantity,
col="#69b3a2",
names.arg=sports$Sport,
las=2)
})
output$tableSport = renderTable(sports[1:25,])
output$plotCompareCountry = renderPlot({
ggplot(t,
aes(x="", y=prop, fill=Country)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
geom_text(aes(y = ypos, label = Percentage), color = "white", size=5) +
scale_fill_brewer(palette="Set1")
})
output$plotRatioAge = renderPlot({
ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
})
output$plotRatioSex = renderPlot({
par(
mfrow=c(1,2),
mar=c(4,4,1,0)
)
hist(rnorm(male), breaks=30 , xlim=c(0,6) , col=rgb(1,0,0,0.5) , xlab="Male" , ylab="nbr of plants" , main="" )
hist(rnorm(female), breaks=30 , xlim=c(0,6) , col=rgb(0,0,1,0.5) , xlab="Female" , ylab="" , main="")
})
#Dataset page
output$tableDataset <- DT::renderDataTable(DT::datatable({
if (input$medal != "All") {
v$dataset <- v$dataset[v$dataset$Medal == input$medal,]
}
if (input$season != "All") {
v$dataset <- v$dataset[v$dataset$Season == input$season,]
}
if (input$sex != "All") {
v$dataset <- v$dataset[v$dataset$Sex == input$sex,]
}
v$dataset
}))
#Model page
output$relationshipModel <- renderPrint({
paste(relationshipModel,"")
})
output$datasetModel <- DT::renderDataTable(DT::datatable({
dataModel
}))
output$plotModel <- renderPlot({
plot(ROCRperf, colorize = TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
})
#Statistic Athelete Base On Height & Weight
output$tableAthleteBody <- DT::renderDataTable(DT::datatable({
athleteBody = filter(data, data$Weight>input$rangeWeight[1] & data$Weight<input$rangeWeight[2]
& data$Height>input$rangeHeight[1] & data$Height < input$rangeHeight[2])
athleteBodyOutput = distinct(athleteBody,athleteBody$Name,.keep_all = TRUE)
athleteBodyOutput
}))
output$plotHeight = renderPlot({
rangeHeightChild = length(unique(data$Name[which(data$Height>input$rangeHeight[1] & data$Height < input$rangeHeight[2])]))
totalAthlete = length(unique(data$Name))
rangeHeightChildPercent = (rangeHeightChild/totalAthlete)*100
totalPercent = 100 - rangeHeightChildPercent
rangeHeightData <- data.frame(
group=c(paste(paste(input$rangeHeight[1],input$rangeHeight[2],sep = " - "),round(rangeHeightChildPercent),sep = " -> "),"Total"),
value=c(rangeHeightChildPercent, totalPercent)
)
# Basic piechart
ggplot(rangeHeightData, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
})
output$plotWeight = renderPlot({
rangeWeightChild = length(unique(data$Name[which(data$Weight>input$rangeWeight[1] & data$Weight < input$rangeWeight[2])]))
totalAthlete = length(unique(data$Name))
rangeWeightChildPercent = (rangeWeightChild/totalAthlete)*100
totalPercent1 = 100 - rangeWeightChildPercent
rangeWeightData <- data.frame(
group=c(paste(paste(input$rangeWeight[1],input$rangeWeight[2],sep = " - "),round(rangeWeightChildPercent),sep = " -> "),"Total"),
value=c(rangeWeightChildPercent, totalPercent1)
)
# Basic piechart
ggplot(rangeWeightData, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
})
#Compare Criteria Page
output$tableCompare <- DT::renderDataTable(DT::datatable({
nationalitySummary
}))
output$plotCompareCriteria =renderPlot({
if(input$criteria == "Medal"){
v$criteria = criteriaMedal
}
if(input$criteria == "Male"){
v$criteria = criteriaMale
}
if(input$criteria == "Female"){
v$criteria = criteriaFemale
}
barplot(height=v$criteria, names=c("China","United States","France","Canada"),
col=rgb(0.8,0.1,0.1,0.6),
xlab="Nationality",
ylab="Ratio",
main="THE GRAPH COMPARE THREE COUNTRY",
ylim=c(0,100)
)
})
#Compare Age Page
output$tableCompareAge <- DT::renderDataTable(DT::datatable({
compareAge = data.frame(Nationality = nationalityAge,
Quantity = v$age)
setDT(compareAge)
compareAge
}))
output$plotCompareAgeBar = renderPlot({
nationalityAgeCount = 1
for (nationalityAgeChild in nationalityAge) {
v$age[nationalityAgeCount] = length(unique(data$Name[which(data$Age > input$rangeAge[1] & data$Age < input$rangeAge[2] & data$Nationality == nationalityAgeChild)]))
nationalityAgeCount = nationalityAgeCount + 1
}
barplot(height=v$age, names=nationalityAge,
col=rgb(0.8,0.1,0.1,0.6),
xlab="Nationality",
ylab="Ratio",
main="THE GRAPH COMPARE AGE SOME COUNTRY",
ylim=c(0,10000)
)
})
#Compare Medal Host Country Page
output$tableCompareMedalHost <- DT::renderDataTable(DT::datatable({
compareMedalHost = data.frame(Host_Country = nationalityHost,
Quantity = v$year)
setDT(compareMedalHost)
compareMedalHost
}))
output$plotCompareMedalHostBar = renderPlot({
nationalityHostCount = 1
for (nationalityHostChild in nationalityHost) {
v$year[nationalityHostCount] = length(data$Name[which(data$Year > input$rangeMedalHost[1] & data$Year < input$rangeMedalHost[2] & data$Host_country == nationalityHostChild)])
nationalityHostCount = nationalityHostCount + 1
}
barplot(height=v$year, names=nationalityHost,
col=rgb(0.8,0.1,0.1,0.6),
xlab="Host Country",
ylab="Ratio",
main="THE GRAPH COMPARE MEDAL SOME HOST COUNTRY",
ylim=c(0,25000)
)
})
#Statistic Event Page
output$tableEvent <- DT::renderDataTable(DT::datatable({
atheleteCount = 1
for (nationalitySub in unique(data$Nationality)) {
v$quantityAthlete[atheleteCount] = length(unique(data$Name[which(data$Event == input$event & data$Nationality == nationalitySub)]))
v$quantityMedal[atheleteCount] = length(data$Name[which(data$Event == input$event & data$Nationality == nationalitySub)])
atheleteCount = atheleteCount + 1
}
event = data.frame(Nationality = unique(data$Nationality),
Quantity_Athelete = v$quantityAthlete,
Quantity_Medal = v$quantityMedal)
setDT(event)
event
}))
output$plotStatisticEvent = renderPlot({
totalPercent = length(unique(data$Name[which(data$Event != input$event)]))
percent = (sum(v$quantityAthlete)/totalPercent)*100
totalPercent = 100 - percent
percentData = data.frame(group = c(paste(input$event,paste0(round(percent),"%"),sep = " "),"Total"),
value = c(percent,totalPercent))
ggplot(percentData, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
})
#Top Reward Page
output$tableAtheleteMedal = DT::renderDataTable(DT::datatable({v$nationalityList}))
output$tableNationalityMedal = DT::renderDataTable(DT::datatable({v$atheleteList}))
}
shinyApp(ui = ui, server = server)
